services:
  # Bitcoin and Lightning Network
  bitcoin:
    image: lncm/bitcoind:v28.0
    container_name: bitcoin
    restart: unless-stopped
    healthcheck:
      interval: 10s
      timeout: 10s
      retries: 10
      test: ["CMD-SHELL", "bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getblockchaininfo"]
    command:
      - '-server=1'
      - '-regtest=1'
      - '-rpcauth=${RPC_USER}:${RPC_AUTH}'
      - '-debug=1'
      - '-zmqpubrawblock=tcp://0.0.0.0:${ZMQ_BLOCK_PORT}'
      - '-zmqpubrawtx=tcp://0.0.0.0:${ZMQ_TX_PORT}'
      - '-zmqpubhashblock=tcp://bitcoin:${ZMQ_HASHBLOCK_PORT}'
      - '-txindex=1'
      - '-dnsseed=0'
      - '-upnp=0'
      - '-rpcbind=0.0.0.0'
      - '-rpcallowip=0.0.0.0/0'
      - '-whitelist=0.0.0.0/0'
      - '-rpcport=${RPC_PORT}'
      - '-deprecatedrpc=signrawtransaction'
      - '-rest'
      - '-listen=1'
      - '-listenonion=0'
      - '-fallbackfee=0.0002'
      - '-blockfilterindex=1'
      - '-peerblockfilters=1'
      - '-maxmempool=5'
    expose:
      - "${RPC_PORT}"
      - "${P2P_PORT}"
      - "${ZMQ_BLOCK_PORT}"
      - "${ZMQ_TX_PORT}"
    volumes:
      - bitcoin:/home/bitcoin/.bitcoin
      - ./dev-data/shared:/shared
    networks:
      - lnd
      - lnemail
    labels:
      CLI: "bitcoin-cli"
      CLI_ARGS: "-chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS}"
      ofelia.enabled: "true"
      ofelia.job-exec.mining.schedule: "@every 30s"
      ofelia.job-exec.mining.command: |
        sh -c '
        set -e
        export PATH=/usr/local/bin:/usr/bin:/bin

        # Get current blockchain state
        blockcount=$$(bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getblockcount 2>/dev/null || echo "0")

        # Create wallet if it doesnt exist
        bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} createwallet "" 2>/dev/null || true

        # Phase 1: Initial blockchain setup (first 50 blocks)
        if [ "$$blockcount" -lt 50 ]; then
          echo "Phase 1: Initial blockchain setup (block $$blockcount/50)"
          temp_addr=$$(bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getnewaddress)
          bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} generatetoaddress 10 "$$temp_addr"
          exit 0
        fi

        # Phase 2: Fund LND and mature the coins
        if [ "$$blockcount" -lt 200 ]; then
          if [ -f /shared/lnd_address ]; then
            lnd_addr=$$(cat /shared/lnd_address)
            echo "Phase 2: Funding LND and maturing coins (block $$blockcount/200)"
            echo "Mining to LND address: $$lnd_addr"
            bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} generatetoaddress 10 "$$lnd_addr"
          else
            echo "Phase 2: Waiting for LND address (block $$blockcount/200)"
            temp_addr=$$(bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getnewaddress)
            bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} generatetoaddress 5 "$$temp_addr"
          fi
          exit 0
        fi

        # Phase 3: Ongoing maintenance - single block with transactions
        echo "Phase 3: Maintenance mining (block $$blockcount)"

        # Generate some transactions for fee estimation if mempool is empty
        mempool_count=$$(bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getmempoolinfo | jq -r .size 2>/dev/null || echo "0")
        if [ "$$mempool_count" -eq 0 ]; then
          echo "Generating transactions for fee market"
          for i in 1 2 3; do
            addr=$$(bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getnewaddress)
            bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} sendtoaddress "$$addr" 0.01 2>/dev/null || true
          done
        fi

        # Mine single block
        if [ -f /shared/lnd_address ]; then
          lnd_addr=$$(cat /shared/lnd_address)
          bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} generatetoaddress 1 "$$lnd_addr"
        else
          temp_addr=$$(bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} getnewaddress)
          bitcoin-cli -chain=regtest -rpcport=${RPC_PORT} -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASS} generatetoaddress 1 "$$temp_addr"
        fi
        '

  lnd:
    image: docker.io/lightninglabs/lnd:v0.18.5-beta
    container_name: lnd
    restart: unless-stopped
    healthcheck:
      interval: 10s
      timeout: 10s
      retries: 10
      test: ["CMD-SHELL", "lncli --network=regtest getinfo"]
    depends_on:
      bitcoin:
        condition: service_healthy
    environment:
      - LND_ALIAS=lnd-dev
    command:
      - 'lnd'
      - '--noseedbackup'
      - '--trickledelay=5000'
      - '--alias=lnd-dev'
      - '--externalip=lnd'
      - '--tlsextradomain=lnd'
      - '--tlsextradomain=host.docker.internal'
      - '--listen=0.0.0.0:9735'
      - '--rpclisten=0.0.0.0:10009'
      - '--restlisten=0.0.0.0:8080'
      - '--bitcoin.active'
      - '--bitcoin.regtest'
      - '--bitcoin.node=bitcoind'
      - '--bitcoind.rpchost=bitcoin'
      - '--bitcoind.rpcuser=${RPC_USER}'
      - '--bitcoind.rpcpass=${RPC_PASS}'
      - '--bitcoind.zmqpubrawblock=tcp://bitcoin:${ZMQ_BLOCK_PORT}'
      - '--bitcoind.zmqpubrawtx=tcp://bitcoin:${ZMQ_TX_PORT}'
      - '--protocol.wumbo-channels'
      - '--maxchansize=1000000000'
      - '--allow-circular-route'
      - '--bitcoin.defaultchanconfs=1'
      - '--maxpendingchannels=10'
    expose:
      - "9735"
      - "10009"
    ports:
      - "${LND_REST_PORT}:8080"
      - "${LND_GRPC_PORT}:10009"
    volumes:
      - lnd:/root/.lnd
      - ./dev-data/shared:/shared
    networks:
      - lnd
      - lnemail
    labels:
      CLI: "lncli"
      CLI_ARGS: "--network=regtest"
      CLI_USER: "lnd"
      ofelia.enabled: "true"
      ofelia.job-exec.lnd_setup.schedule: "@every 15s"
      ofelia.job-exec.lnd_setup.command: |
        sh -c '
        set -e

        # Check if LND is responsive
        if ! lncli --network=regtest getinfo >/dev/null 2>&1; then
          echo "LND not ready, attempting wallet creation..."
          # Auto-create wallet with empty passphrase for development
          echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n" | lncli --network=regtest create 2>/dev/null || echo "Wallet creation attempted"
          exit 0
        fi

        echo "LND is ready"

        # Generate address if not exists
        if [ ! -f /shared/lnd_address ]; then
          echo "Generating LND address..."
          addr_output=$$(lncli --network=regtest newaddress p2wkh)
          lnd_address=$$(echo "$$addr_output" | jq -r ".address")
          if [ -n "$$lnd_address" ] && [ "$$lnd_address" != "null" ]; then
            echo "$$lnd_address" > /shared/lnd_address
            echo "LND address saved: $$lnd_address"
          fi
        fi

        # Check wallet balance
        balance_output=$$(lncli --network=regtest walletbalance 2>/dev/null || echo "{\"confirmed_balance\":\"0\"}")
        balance=$$(echo "$$balance_output" | jq -r ".confirmed_balance" 2>/dev/null || echo "0")

        echo "Current balance: $$balance satoshis"

        # Channel management - only proceed if we have sufficient balance
        if [ "$$balance" -gt 10000000 ]; then  # 0.1 BTC minimum for channel operations
          echo "Sufficient balance for channel operations"

          # Check for existing channels
          active_channels=$$(lncli --network=regtest listchannels | jq ".channels | length")
          pending_channels=$$(lncli --network=regtest pendingchannels | jq ".pending_open_channels | length")

          if [ "$$active_channels" -eq 0 ] && [ "$$pending_channels" -eq 0 ]; then
            echo "No channels exist, checking for router..."

            # Wait for router TLS certificate
            if [ -f /shared/router_tls.cert ]; then
              echo "Attempting channel creation with router..."

              # Get router info
              router_info=$$(lncli --network=regtest --rpcserver=router_lnd:10010 --tlscertpath=/shared/router_tls.cert --macaroonpath=/shared/router_admin.macaroon getinfo 2>/dev/null || echo "{}")
              router_pubkey=$$(echo "$$router_info" | jq -r ".identity_pubkey" 2>/dev/null || echo "")

              if [ -n "$$router_pubkey" ] && [ "$$router_pubkey" != "null" ] && [ "$$router_pubkey" != "" ]; then
                echo "Router pubkey: $$router_pubkey"

                # Connect to router
                lncli --network=regtest connect $$router_pubkey@router_lnd:9735 2>/dev/null || echo "Already connected or connection failed"

                # Open channel
                echo "Opening channel with router..."
                if lncli --network=regtest openchannel --node_key=$$router_pubkey --local_amt=5000000 --push_amt=2500000; then
                  echo "Channel opening initiated"
                else
                  echo "Channel opening failed"
                fi
              else
                echo "Router not available yet"
              fi
            else
              echo "Router TLS certificate not available"
            fi
          else
            echo "Channels exist: active=$$active_channels, pending=$$pending_channels"
          fi
        else
          echo "Insufficient balance for channel operations (need > 0.1 BTC)"
        fi
        '

  lnd-setup:
    image: docker.io/lightninglabs/lnd:v0.18.5-beta
    container_name: lnd-setup
    depends_on:
      lnd:
        condition: service_healthy
      router_lnd:
        condition: service_healthy
    volumes:
      - lnd:/root/.lnd
      - router_lnd:/root/.router_lnd
      - ./dev-data/shared:/shared
    networks:
      - lnd
      - lnemail
    entrypoint: ["sh"]
    command:
      - -c
      - |
        set -e
        echo "Setting up LND certificates and macaroons..."

        mkdir -p /shared
        chmod 755 /shared

        # Copy certificates with retry logic
        copy_with_retry() {
          local src="$1"
          local dest="$2"
          local name="$3"
          local max_attempts=30
          local attempt=0

          while [ $$attempt -lt $$max_attempts ]; do
            if [ -f "$$src" ]; then
              cp "$$src" "$$dest"
              chmod 644 "$$dest"
              echo "$$name copied successfully"
              return 0
            fi
            echo "Waiting for $$name... ($$attempt/$$max_attempts)"
            sleep 2
            attempt=$((attempt + 1))
          done

          echo "ERROR: $$name not found after $$max_attempts attempts"
          return 1
        }

        # Copy all required files
        copy_with_retry "/root/.lnd/tls.cert" "/shared/tls.cert" "Main LND TLS certificate"
        copy_with_retry "/root/.router_lnd/tls.cert" "/shared/router_tls.cert" "Router LND TLS certificate"
        copy_with_retry "/root/.lnd/data/chain/bitcoin/regtest/admin.macaroon" "/shared/admin.macaroon" "Main LND admin macaroon"
        copy_with_retry "/root/.router_lnd/data/chain/bitcoin/regtest/admin.macaroon" "/shared/router_admin.macaroon" "Router LND admin macaroon"

        # Create invoice macaroon
        echo "Creating invoice macaroon..."
        if lncli --network=regtest --rpcserver=lnd:10009 --tlscertpath=/shared/tls.cert --macaroonpath=/shared/admin.macaroon bakemacaroon invoices:read invoices:write --save_to /shared/invoice.macaroon; then
          chmod 644 /shared/invoice.macaroon
          echo "Invoice macaroon created successfully"
        else
          echo "ERROR: Failed to create invoice macaroon"
          exit 1
        fi

        echo "LND setup completed successfully"
    restart: "no"

  ofelia:
    image: mcuadros/ofelia:latest
    container_name: ofelia
    restart: unless-stopped
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - bitcoin
      - lnd
    networks:
      - lnd
      - lnemail

  router_lnd:
    image: docker.io/lightninglabs/lnd:v0.18.5-beta
    container_name: router_lnd
    restart: unless-stopped
    healthcheck:
      interval: 10s
      timeout: 10s
      retries: 10
      test: ["CMD-SHELL", "lncli --network=regtest --rpcserver=localhost:10010 getinfo"]
    depends_on:
      bitcoin:
        condition: service_healthy
    command:
      - 'lnd'
      - '--noseedbackup'
      - '--alias=router_lnd'
      - '--externalip=router_lnd'
      - '--tlsextradomain=router_lnd'
      - '--tlsextradomain=host.docker.internal'
      - '--listen=0.0.0.0:9735'
      - '--rpclisten=0.0.0.0:10010'
      - '--restlisten=0.0.0.0:8081'
      - '--bitcoin.active'
      - '--bitcoin.regtest'
      - '--bitcoin.node=bitcoind'
      - '--bitcoind.rpchost=bitcoin'
      - '--bitcoind.rpcuser=${RPC_USER}'
      - '--bitcoind.rpcpass=${RPC_PASS}'
      - '--bitcoind.zmqpubrawblock=tcp://bitcoin:${ZMQ_BLOCK_PORT}'
      - '--bitcoind.zmqpubrawtx=tcp://bitcoin:${ZMQ_TX_PORT}'
    volumes:
      - router_lnd:/root/.lnd
      - ./dev-data/shared:/shared
    networks:
      - lnd
      - lnemail
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.router_setup.schedule: "@every 20s"
      ofelia.job-exec.router_setup.command: |
        sh -c '
        set -e

        # Auto-create router wallet if needed
        if ! lncli --network=regtest --rpcserver=localhost:10010 getinfo >/dev/null 2>&1; then
          echo "Creating router wallet..."
          echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n" | lncli --network=regtest --rpcserver=localhost:10010 create 2>/dev/null || echo "Router wallet creation attempted"
        else
          echo "Router LND is ready"
        fi
        '

  # Mail certificate generation service
  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - ./dev-data/config/ssl:/certs
    command: >
      sh -c "
        apk add --no-cache openssl &&
        if [ ! -f /certs/mail.lnemail.test-cert.pem ] || [ ! -f /certs/mail.lnemail.test-key.pem ] || [ ! -f /certs/demoCA/cacert.pem ]; then
          echo 'Generating SSL certificates for mail server...' &&
          mkdir -p /certs/demoCA &&
          echo 'Creating CA private key...' &&
          openssl genrsa -out /certs/demoCA/cakey.pem 2048 &&
          echo 'Creating CA certificate...' &&
          openssl req -new -x509 -key /certs/demoCA/cakey.pem -out /certs/demoCA/cacert.pem -days 3650 -subj '/CN=LNEmail Development CA/O=LNEmail/C=US' &&
          echo 'Creating server private key...' &&
          openssl genrsa -out /certs/mail.lnemail.test-key.pem 2048 &&
          echo 'Creating server certificate signing request...' &&
          openssl req -new -key /certs/mail.lnemail.test-key.pem -out /certs/mail.lnemail.test.csr -subj '/CN=mail.lnemail.test/O=LNEmail/C=US' &&
          echo 'Creating OpenSSL config for extensions...' &&
          {
            echo '[req]';
            echo 'distinguished_name = req_distinguished_name';
            echo 'req_extensions = v3_req';
            echo '';
            echo '[req_distinguished_name]';
            echo '';
            echo '[v3_req]';
            echo 'subjectAltName = @alt_names';
            echo '';
            echo '[alt_names]';
            echo 'DNS.1 = mail.lnemail.test';
            echo 'DNS.2 = lnemail.test';
            echo 'DNS.3 = localhost';
          } > /certs/openssl.conf &&
          echo 'Creating server certificate...' &&
          openssl x509 -req -in /certs/mail.lnemail.test.csr -CA /certs/demoCA/cacert.pem -CAkey /certs/demoCA/cakey.pem -CAcreateserial -out /certs/mail.lnemail.test-cert.pem -days 3650 -extensions v3_req -extfile /certs/openssl.conf &&
          echo 'Cleaning up temporary files...' &&
          rm -f /certs/mail.lnemail.test.csr /certs/openssl.conf &&
          echo 'Setting permissions...' &&
          chmod 644 /certs/mail.lnemail.test-cert.pem /certs/mail.lnemail.test-key.pem /certs/demoCA/cacert.pem &&
          chmod 600 /certs/demoCA/cakey.pem &&
          echo 'SSL certificates generated successfully'
        else
          echo 'SSL certificates already exist, skipping generation'
        fi
      "
    restart: "no"
    networks:
      - lnemail

  # Mail services
  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    hostname: mail.lnemail.test
    restart: unless-stopped
    env_file: .env.development
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    volumes:
      - ./dev-data/mail-data/:/var/mail/
      - ./dev-data/mail-state/:/var/mail-state/
      - ./dev-data/mail-logs/:/var/log/mail/
      - ./dev-data/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
      - ./dev-data/mail-agent:/var/mail-agent
      - ./scripts/mail-agent.py:/var/mail-agent/mail-agent.py:ro
      - ./dev-data/shared:/shared
    environment:
      - MAIL_REQUESTS_DIR=/shared/requests
      - MAIL_RESPONSES_DIR=/shared/responses
      - MAIL_DOMAIN=lnemail.test
      - OVERRIDE_HOSTNAME=mail.lnemail.test
      - POSTMASTER_ADDRESS=postmaster@lnemail.test
      - PERMIT_DOCKER=host
      - LOG_LEVEL=debug
      - ENABLE_FAIL2BAN=0
      - ENABLE_CLAMAV=0
      - ENABLE_RSPAMD=0
      - SSL_TYPE=self-signed
    ports:
      - "25:25"
      - "143:143" # IMAP
      - "587:587" # SMTP with TLS
      - "993:993" # IMAP with SSL
      - "465:465" # SMTP with SSL
    networks:
      - lnemail
    healthcheck:
      test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
      timeout: 3s
      retries: 0
      interval: 10s

  mail-agent:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mail-agent
    restart: unless-stopped
    depends_on:
      - mailserver
    volumes:
      - ./dev-data/mail-data/:/var/mail/
      - ./dev-data/mail-state/:/var/mail-state/
      - ./dev-data/mail-logs/:/var/log/mail/
      - ./dev-data/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
      - ./dev-data/mail-agent:/var/mail-agent
      - ./scripts/mail-agent.py:/var/mail-agent/mail-agent.py:ro
      - ./dev-data/shared:/shared
    environment:
      - MAIL_REQUESTS_DIR=/shared/requests
      - MAIL_RESPONSES_DIR=/shared/responses
      - MAIL_DOMAIN=lnemail.test
    networks:
      - lnemail
    entrypoint: ["sh"]
    command:
      - -c
      - |
        set -e
        echo "Installing mail agent dependencies..."
        apt update
        apt install -y python3-inotify python3-filelock
        echo "Starting mail agent..."
        exec python3 /var/mail-agent/mail-agent.py

  # LNEmail services
  lnemail-redis:
    image: redis:7-alpine
    container_name: lnemail-redis
    restart: unless-stopped
    volumes:
      - ./dev-data/redis-data:/data
    networks:
      - lnemail
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - "6379:6379"

  lnemail-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lnemail-api
    restart: unless-stopped
    volumes:
      - ./:/app
      - ./dev-data/lnemail-data:/data
      - ./dev-data/shared:/shared
    environment:
      - DEBUG=True
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=sqlite:////data/lnemail.db
      - MAIL_DOMAIN=lnemail.test
      - MAIL_DATA_PATH=/var/mail
      - MAIL_REQUESTS_DIR=/shared/requests
      - MAIL_RESPONSES_DIR=/shared/responses
      - LND_GRPC_HOST=lnd:10009
      - LND_CERT_PATH=/shared/tls.cert
      - LND_MACAROON_PATH=/shared/invoice.macaroon
      - EMAIL_PRICE=1000
      - REDIS_HOST=lnemail-redis
      - REDIS_PORT=6379
      - SECRET_KEY=dev_secret_key_for_local_testing_only
      - IMAP_HOST=mail.lnemail.test
      - IMAP_PORT=143
      - SMTP_HOST=mail.lnemail.test
      - SMTP_PORT=587
    ports:
      - "8000:8000"
    networks:
      - lnd
      - lnemail
    depends_on:
      - lnemail-redis
      - mailserver
      - lnd
      - lnd-setup
    command: >
      bash -c "
        echo 'Waiting for LND certificates to be available...'
        while [ ! -f /shared/tls.cert ] || [ ! -f /shared/invoice.macaroon ]; do
          echo 'Certificates not ready, waiting 5 seconds...'
          sleep 5
        done
        echo 'Certificates found, starting API...'
        alembic upgrade head
        uvicorn src.lnemail.main:app --host 0.0.0.0 --port 8000 --reload --proxy-headers
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  lnemail-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lnemail-worker
    restart: unless-stopped
    volumes:
      - ./:/app
      - ./dev-data/lnemail-data:/data
      - ./dev-data/shared:/shared
    environment:
      - DEBUG=True
      - DATABASE_URL=sqlite:////data/lnemail.db
      - MAIL_DOMAIN=lnemail.test
      - MAIL_DATA_PATH=/var/mail
      - MAIL_REQUESTS_DIR=/shared/requests
      - MAIL_RESPONSES_DIR=/shared/responses
      - LND_GRPC_HOST=lnd:10009
      - LND_CERT_PATH=/shared/tls.cert
      - LND_MACAROON_PATH=/shared/invoice.macaroon
      - REDIS_HOST=lnemail-redis
      - REDIS_PORT=6379
      - SECRET_KEY=dev_secret_key_for_local_testing_only
      - IMAP_HOST=mail.lnemail.test
      - IMAP_PORT=143
      - SMTP_HOST=mail.lnemail.test
      - SMTP_PORT=587
    networks:
      - lnd
      - lnemail
    depends_on:
      - lnemail-redis
      - mailserver
      - lnd
      - lnd-setup
    command: >
      bash -c "
        echo 'Waiting for LND certificates to be available...'
        while [ ! -f /shared/tls.cert ] || [ ! -f /shared/invoice.macaroon ]; do
          echo 'Certificates not ready, waiting 5 seconds...'
          sleep 5
        done
        echo 'Certificates found, starting worker...'
        rq worker lnemail
      "

networks:
  lnd:
    driver: bridge
  lnemail:
    driver: bridge

volumes:
  bitcoin:
  lnd:
  router_lnd:
